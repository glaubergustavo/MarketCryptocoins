//
//  CoinPresenter.swift
//  MarketCryptocoins
//
//  Created by madeinweb on 24/09/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CoinPresentationLogic {
    func presentCoin(response: Coin.FetchCurrentData.Response)
    func presentMarketChart(response: [Coin.FetchMarketChart.Response])
    func presentOhlc(response: [Coin.FetchOhlc.Response])
    func presentError(error: CryptocurrenciesError)
}

class CoinPresenter: CoinPresentationLogic {
    
    weak var viewController: CoinDisplayLogic?
    
    // MARK: Do something
    
    func presentCoin(response: Coin.FetchCurrentData.Response) {        
        let viewModel = Coin.FetchCurrentData.ViewModel(
            currentPrice: response.currentPrice.toCurrency(from: response.baseCoin),
            priceChangePercentage: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentage.toPercentage())", changePercentage: response.priceChangePercentage),
            coinPrice: 1.toCurrency(from: response.baseCoin),
            coinName: response.coinName,
            coinSymbol: response.coinSymbol.uppercased(),
            coinImage: response.coinImage,
            currentPriceComparationToCoin: response.currentPriceComparationToCoin.toCurrency(from: response.baseCoin),
            comparationToCoinSymbol: response.comparationToCoinSymbol.uppercased(),
            priceChangePercentageOneDay: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageOneDay.toPercentage())", changePercentage: response.priceChangePercentageOneDay),
            priceChangePercentageOneWeek: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageOneWeek.toPercentage())", changePercentage: response.priceChangePercentageOneWeek),
            priceChangePercentageTwoWeeks: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageTwoWeeks.toPercentage())", changePercentage: response.priceChangePercentageTwoWeeks),
            priceChangePercentageOneMonth: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageOneMonth.toPercentage())", changePercentage: response.priceChangePercentageOneMonth),
            priceChangePercentageTwoMonths: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageTwoMonths.toPercentage())", changePercentage: response.priceChangePercentageTwoMonths),
            priceChangePercentageOneYear: UtilFacade.setGreenOrRedColor(value: "\(response.priceChangePercentageOneYear.toPercentage())", changePercentage: response.priceChangePercentageOneYear),
            marketCapRank: "#\(response.marketCapRank)",
            marketCap: response.marketCap.toCurrency(from: response.baseCoin),
            fullyDilutedValuation: response.fullyDilutedValuation.toCurrency(from: response.baseCoin),
            totalVolume: response.totalVolume.toCurrency(from: response.baseCoin),
            higth24H: response.higth24H.toCurrency(from: response.baseCoin),
            low24H: response.low24H.toCurrency(from: response.baseCoin),
            supplyAvailable: response.supplyAvailable.formatNumber(),
            totalSupply: response.totalSupply.formatNumber(),
            maxSupply: response.maxSupply.formatNumber(),
            maximumValue: response.maximumValue.toCurrency(from: response.baseCoin),
            maximumValuePercentage: UtilFacade.setGreenOrRedColor(value: "\(response.maximumValuePercentage.toPercentage())", changePercentage: response.maximumValuePercentage),
            maximumValueDate: "\(response.maximumValueDate.formatter(to: "dd, MMM, YYYY")) (\(response.maximumValueDate.differenceDays(to: Date())) dias)",
            minimumValue: response.minimumValue.toCurrency(from: response.baseCoin),
            minimumValuePercentage: UtilFacade.setGreenOrRedColor(value: "\(response.minimumValuePercentage.toPercentage())", changePercentage: response.minimumValuePercentage),
            minimumValueDate: "\(response.minimumValueDate.formatter(to: "dd, MMM, YYYY")) (\(response.minimumValueDate.differenceDays(to: Date())) dias)")
        viewController?.displayCoin(viewModel: viewModel)
    }
    
    func presentMarketChart(response: [Coin.FetchMarketChart.Response]) {
        let viewModel = Coin.FetchMarketChart.ViewModel(
            minimumPrice: (response.min { $0.price < $1.price }?.price ?? 0.0) - (1/100),
            maximumPrice: (response.max { $1.price > $0.price }?.price ?? 0.0) + (1/100),
            dataEntries: response.map { $0.dataEntry }
        )
        viewController?.displayMarketChart(viewModel: viewModel)
    }
    func presentOhlc(response: [Coin.FetchOhlc.Response]) {
        let viewModel = Coin.FetchOhlc.ViewModel(
            minimumPrice: (response.min { $0.price < $1.price }?.price ?? 0.0) - (1/100),
            maximumPrice: (response.max { $1.price > $0.price }?.price ?? 0.0) + (1/100),
            dataEntries: response.map { $0.dataEntry }
        )
        viewController?.displayOhlc(viewModel: viewModel)
    }
    
    func presentError(error: CryptocurrenciesError) {
        viewController?.displayError(error: error.errorDescription)
    }

}
